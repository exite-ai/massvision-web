










		---------/---------/---------/---------/---------/---------
		
						ＭＡＳＳ Ｖｉｓｉｏｎ
		
							version 4.0
		
				1995-1996	L.S.nail / L.S.nail programing.
		
							User's Manual
		
						第３版		96/12/xx
		
		---------/---------/---------/---------/---------/---------

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	CHAPTER 0:				はじめに

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

以前の MASS Vision （ version 3.0 以前のものは見たことがないのですが）では、
変数を含むＮ式の記述はできませんでした。
そのため、Ｎ式によって表される動きに対しては１人１人１カウントごとの位置を入れていく、という大変な作業になっていました。
しかし、version 3.0 の開発された時期を考えれば、スライドの生成方法、
データの管理、マクロによる動きの表現などのアイディアは素晴らしいもので、
version 4.0 の開発デザインの参考にさせていただきました。

この version 4.0 は、打ち上げの次の日に元となるアイディアを起こしました。
version 4.0 のコンセプトは、『なるべくパンフと同じような表現方法で』です。
が、やはり人間の図形認識力、紙という媒体のもつ書式の自由さには勝てませんし、
ハード的制限、力不足もあり、簡単に、直観的に使えるものには仕上がっていません。
ですが、計算量が膨大になって紙の上で再現することは困難な回転系の動きや、
Ｎ式を含む動き、スライドなどを簡単な操作によって短時間で視覚的に確認することが
できるという点や、動きを作った人以外にも簡単に動きが確認できるという点など、
紙よりも格段に使いやすい部分も多くあります。
MASS Vision は、単に機械で置き換えることのできる計算処理などの単純作業を
代わりにやっているだけだけで、動きを考えるのは結局、我々自身であることには
変わりありません。 MASS Vision は単に動きを再現しているだけで実際にどのように
見えるのかをということは衣装や盾との関係もあるということを忘れてはいけません。

これは開発当初には気づかなかったことですが、動きがデジタル的に保存されることで
記録のコピーが簡単になり、データの劣化というものは原理的になくなります。
そのため、過去の動きを作られたときのままに見ることもできますし、パンフが
男女別々に作られて、男女合わせた動きがなかなか分かりにくい３部なども
きちんとした記録を残せます。時間が経たなければ大した利点にはなりませんが、
こういった点でも大きな意味があるでしょう。

私は、この MASS Vision version 4.0 が９６年の製作に大きな影響を与え、
今後のマスゲーム製作においても多くの役割を果たすだろうと自負しています。
一度使えるようになったら MASS Vision は製作にあたって必要不可欠になるほどの
ものなのでぜひ使えるようになってください。

附属のマスゲームの今後の発展を願って。


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	CHAPTER 1:				First Step

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	ここでは MASS Vision version 4.0 を使用する上で知っておく必要あることを
	記述・紹介します。
	必ず読んでください。多分読まないと分からないでしょう。
	
	
	
■ MASS Vision version 4.0 概要
	１つ１つのシーンをデータの最小単位として管理するようになっています。
	シーンデータはマクロとキャラクタに与えられた情報とで構成されます。
	変数を使うことのできるマクロで表現した動きを一人一人に与えることで
	パンフでの動きの表現に近い形で入力できるようにしてあります。
	
■ MASS Vision version 4.0 用語解説
	MASS Vision version 4.0 特有の用語について解説します。
	
	□ プロジェクト
		プロジェクト、とはマスでいう一つの「部」、ぐらいに考えてもらえれば
		いいと思います。
		内部的には一つのディレクトリです。１〜９までは project4 というふうに、
		１０以降はＡ，Ｂ，Ｃという順でつけられます。
	
	□ マクロ
		マクロ、という言葉は ver.3.0 からそのまま受け継いだものです。
		FRESH GENIUS （２版） によれば、長い、大きい、と言ったことを表す接頭語
		となっていますが、ここではＮ式、または１マス４といった行動を示す記号
		そのものを示します。
		
	□ 変数
		Ｎ式のＮのことを変数といいます。
		MASS Vision version 4.0 の場合、パンフより格段に表現力が低いために、
		ＮのほかにＭ，Ｌ，Ｐ，Ｑ，Ｒのお世話になります。
		１マス４でｎカウント、といった使い方のほか、
		右ｐ度方転、といった使い方もします。
	
	□ キャラクタ
		配置されたマスゲーマー１人１人をそれぞれキャラクタと呼びます。
	
	□ キャラクタ番号
		キャラクタに対してつけられている番号のことです。
		この番号は配置された順番に０から設定されますが、
		キャラクタを消去した場合、いなくなった人の分だけ番号がつめられます。
		
	□ 初期方向
		シーンのはじめに向いている方向です。
		MASS Vision version 4.0 ではパンフ同様、シーンのはじめの方向と
		０カウント目の方向は区別されています。
		
	□ 相対方向・絶対方向
		相対方向・絶対方向は方転、スライドマクロに関して重要な意味をもちます。
		絶対方向とは、画面の上をｙ軸の正、右をｘ軸の正の方向としたときの
		ベクトル方向を示すのに対し、相対方向の場合は、それぞれのキャラクタが
		向いている方向をｙ軸の正の方向に、右をｘ軸の正の方向にとったときの
		ベクトル方向を示します。
		
■ MASS Vision version 4.0 のながれ
	MASS Vision version 4.0 でのデータ作成からアニメーションまでの
	流れをメニューを中心にで紹介します。
	
	１．	まず配置を使ってシーンのはじめの形を作ります。
			配置−線描画などを使ってかたちを作ってください。
	
	２．	次にマクロ編集−初期方向設定ではじめに向いている方向を設定します。
			変数を使っているならマクロ編集−変数設定で変数も設定してください。
	
	３．	マクロを書きます。マクロ編集−マクロ入力で必要な分だけ
			マクロを入力してください。
			
	４．	キャラクタにマクロを設定します。マクロ編集−マクロ指定で
			キャラクタにそれぞれのマクロを指定してください。
			
	５．	マクロ編集−アニメーションのなかから編集シーンのアニメを
			選んでください。マニュアルでもａｕｔｏでもかまいません。
			カウントが自動設定された、と表示され、アニメーションするはずです。
			エラーがでた場合はエラーの内容にしたがって、マクロを正しく
			書き直したり、マクロを指定したり、初期方向をつけたりして
			もう一度アニメーションしてみてください。
			アニメーションはするけれど、動きがおかしい、こういう場合は
			設定にミスがあるか、マクロそのものに問題があります。
			よく見直してみましょう。

■ 使用上の注意
	
	□ データ互換性
		古いシリアルの MASS Vision version 4.0 で作成したデータは
		新しいシリアルのもので読むことはできますが、逆はできません。
		新しいシリアルのものを使ってください。
	
	□ データのエラー
		ディスクの破損などでデータが壊れている場合は、
		そのシーンは存在しないものとして取り扱われます。
		セーブしたはずのものがセーブされていない、という場合は
		ディスクまたはファイルが壊れていないかチェックしてみてください。
		

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	CHAPTER 2:				References

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	
	以下は MASS Vision version 4.0 を使用する上で必要となってくる機能の解説、
	さまざまなテクニック、追加情報です。
	実際に使っていく上で必要となることなので、一度ざっと目を通しておき、
	後で必要となったときにでも見なおすとよいと思います。
	
	
	
■■■■ マクロ書式 ■■■■
	
	ここでは MASS vision version 4.0 を使う上で基本となる
	マクロ、書式について説明します。
	
■ マクロ概要

	１．	四則演算（変数、かっこを含む）が可能です。ただしかっこの前、
			変数の後などの掛け算記号を省略することはできません。
	２．	大文字小文字の区別はしません。
	３．	変数はｎ、ｍ、ｌ、ｐ、ｑ、ｒの６つの整数変数が使えます。
			少数部分は切り捨てられます。
			
	※	計算途中で生じる小数点以下の値も切り捨てになります。
		そのため (4/3)*5 というのは５になります。６にはなりません。
		掛け算を割り算より先に行うほうが高い精度が得られます。

	※	１マスの距離は１２です。詳しくはスライドのところを見てください。

■ マクロ命令
	n はカウント数、l は向きを表す文字 L,R 、t は角度、x,y はベクトル成分、
	位置座標を表す変数です。そのほかの変数はそれぞれを参照してください。
	基本的にマクロでの () は相対方向を示し、<> は絶対方向を示しています。

	※	書式が正しくなかったりしたときに出るエラーメッセージは正確さに
		欠けています。エラーは、間違いがある、ということを知らせている
		ぐらいのものと思ってください。

	□ ふつう歩き
		ふつうにマスを等分して歩くためのものです。
		
		Fm(x,y)[n]	ｍ歩／マス でｎカウント（ｘ，ｙ）方向にふつう歩き。
					ｍを省略した場合は環境設定によって指定された歩数になり、
					ｘ，ｙが省略された場合はふつうに前に進みます。
					（０，１）を指定したのと同じです。
		Fm<x,y>[n]	歩く方向の指定が絶対方向になります。
		BWm(x,y)[n]	ｍ歩／マス でｎカウント（ｘ，ｙ）方向にバック。
		BWm<x,y>[n]	方向の指定が絶対方向になります。

		☆ ダッシュは逆方向、について
			マクロ指定のときに、ダッシュ指定をした人に（ｘ，ｙ）ベクトル指定
			がある場合は、左右逆方向に進みます。
			ただし、'F' のあとに '!' をつけるとその方転は対象外になります。

		※	１．５マス４歩などは１．５という小数が指定できないので、
			Ｆマクロでは記述できません。Ｓマクロを使って
				s(0,16)[4]
			と記述してください。
			
	□ 方転
		方転します。
		４５度刻みでない方向、つまりベクトルで表現される方向の場合の方向は、
		スライドの場合と同じです。
		本部に向かって右回りに角度が増していきます。
		
		Tlt[n]	相対方向ｎ歩回。ｌ方向にｔ度回転。
				ｔは０〜１８０まで、４５度刻みで角度を指定できます。
				ｎが省略された場合は０歩回になります。
		Tt[n]	絶対方向ｎ歩回。今どちらを向いているとしても、本部を０度として
				右回りに０〜３１５まで、４５刻みで表される方向ｔに方転します。
			
			※	ｔを変数ｒ，ｌを使って表現すると相対方向右方転として判断して
				しまうので、変数で表現する場合はｒ，ｌ以外を使って下さい。
	
		T(x,y)[n]	相対ベクトル方向ｎ歩回。相対方向スライドに同様。
		T<x,y>[n]	絶対ベクトル方向ｎ歩回。今いる位置から＜ｘ，ｙ＞で表される
					絶対ベクトル方向を向きます。

		☆ ダッシュは逆方向、について
			マクロ指定のときに、ダッシュ指定をした人は逆方向に方転します。
			ただし、'T' のあとに '!' をつけるとその方転は対象外になります。
			つまり、
				f[2*n] tr45 f[2*n] t!r90 f[32-4*n]
			とした場合、２つ目の方転はダッシュのついている人も右９０です。
			相対方向方転の場合は、方転方向が逆に（右が左、左が右に）なりますが
			絶対方向方転の場合は１８０度逆の方向になります。

		☆ ０歩方転を何度もやると…？
			次のような複数の０歩方転が続くマクロでは
				tr45[0] tl90[0] tr135[0]
			すべての方転を０カウントでこなすことになり、tr90[0] と書いたのと
			同じになります。
			これを利用すれば、ベクトル方向方転の場合に
				t(1,2)[0] tp[0]
			というようにして、変数 p で向きを変えると、ベクトルの成分を
			t(p,q) と表すときよりも、変数を１つ節約できます。
			（けちくさい。）
			
	□ ブレイク
		ブレイクです。
		あしぶみとブレイクとで何も違わないのに気づいたのはあとからでした。
		でも、一応区別して使ってください。上位のバージョンでは
		意味を持つかもしれません。
	
		B[n]	ｎカウントブレイク。
	
	□ あしぶみ
		あしぶみです。
		
		I[n]	ｎカウントあしぶみ。

	□ スライド
		スライドします。１マスの距離を１２として、絶対方向スライドの場合は
		ｙ軸の正の方向を本部方向にとって、移動量を（ｘ，ｙ）で与えます。
		ｘ＝１２，ｙ＝１２のときは、本部から右に４５度の方向に
		スライドすることになります。
		
		S<x,y>[n]	絶対方向スライド。現在地から＜ｘ，ｙ＞方向にｎ歩スライド。
		S(x,y)[n]	相対方向スライド。成分（ｘ，ｙ）は向いている方向をｙ軸の
					正の向きにとるので、座標軸のｘ，ｙとは一致しません。
		S{x,y}[n]	絶対位置スライド。現在地から＜ｘ，ｙ＞までｎ歩でスライド。

		☆ 相対方向スライドとは
			相対方向の場合は、その人が向いている方向をｙ軸の正の方向に
			とります。つまり、ｘ＝１２，ｙ＝１２のときに、はじめ本部方向を
			向いている人は、本部から右に４５度方向にスライドしますが、
			やぐら方向を向いている人は本部から２２５度
			（やぐらから４５度）方向にスライドすることになります。
			絶対方向スライドはあまり使うことはないでしょう。
			普通は相対方向スライドを使います。
			ただし、このとき向いている方向が軸に対して平行な方向でない場合は
			（本部から右４５度のときなど）正しく動作しません。
	
		☆ 絶対位置スライドとは
			絶対位置スライドはスライドする目的地の座標を指定します。
			スライドしたあとに指定した座標に来るようにスライドするわけです。
			絶対方向スライドの＜ｘ，ｙ＞はスライドする成分を表していますが、
			絶対位置スライドの場合は座標を表しています。
	
		☆ ダッシュは逆方向、について
			マクロ指定のときに、ダッシュ指定をした人は逆方向にスライドします。
			ただし、'S' のあとに '!' をつけるとその方転は対象外になります。
			つまり、
				s(n*12,(4-n)*6)[8] t315 f[4] s!((4-n)*12,n*6)[8]
			とした場合、２つ目のスライドはダッシュのついている人も
			ついていない人と同じ方向にスライドします。
			相対方向スライドの場合は、スライド方向のｘ成分が逆になりますが、
			絶対方向スライドの場合は１８０度逆の方向になり、（ｘ，ｙ）への
			スライドだったとすると（−ｘ，−ｙ）へのスライドになります。
			
		★	リンクを使ってスライドを作ると自動的に s(0+q,0+r)[n] というマクロと
			s{0+q,0+r}[n] というマクロを作ります。（ｎは場合により異なります）
			この無意味な "0+" というのはリンクを使って作成されたマクロ
			であることを示すためのものなので、これと同じマクロを作ったり、
			無意味な "0+" を消したり、変更を加えたりしないでください。
			再度リンクを行ったとき、リンクで作成されたものと認識できないため、
			リンク用のマクロがまた作られてしまいます。

	□ 回転
		ただ、まわります。
		３６０度までまわれます。
	
		Rlt<x,y>[n]	＜ｘ，ｙ＞中心回転。ｌ方向にｔ度ｎカウントで回転します。
					＜ｘ，ｙ＞を省略すると原点中心回転になります。

	□ サイクロン
		サイクロンをします。
		到着位置にはけっこう誤差がでるので、
		リサイクルして、次のシーンのスタート位置として使うのには向いていません。	
		Clot<x,y>(r)[n]	＜ｘ，ｙ＞を中心にしてｎカウントでｌで示される向き、
						R(right) または L(left) にｔ度サイクロン。
						ｏには拡大、縮小を示す文字 E(expand),C(contract) を
						入れます。ｔを省略した場合、４５度になります。
						＜ｘ，ｙ＞が省略された場合原点を中心にします。
						ｒにはｎカウントにどれだけ半径を大きくするかを
						指定します。省略した場合は、ｏに設定した文字に
						したがって１カウントに４拡縮します。
						ここで指定する値は、ｏにいれる文字よりも優先順位が
						上です。clc(64)[32] とした場合でも、３２カウントで
						６４拡大します。つまりｏがいずれであっても、
						正の値を入れれば拡大、負の値を入れれば縮小します。

	□ ダイクロン
		ダイクロンします。
		が、標準的なダイクロンしかできないでしょう。
		また、サイクロンと同様に精度はあまり良くありません。
	
		Dld,t<x,y>(r)[n]	＜ｘ，ｙ＞を中心にしてｎカウントでｌに示される
							方向、R(right) または L(left) にｔ度ダイクロン。
							＜ｘ，ｙ＞が省略された場合原点を中心にします。
							普通省略しますが、ｒにはｎカウントでどれだけ半径を
							大きくするかを指定することができます。
							省略した場合は１カウントに４大きくなります。
							負の値を設定すると変になります。

	□ ネスト
		ネストというのは専門用語ですが、日本語では「入れ子にする」といいます。
		もっと分かりにくいので「ネスト」のほうがましだと思います。
		どのようなときにつかうものなのかというと、はじめは２通り、次に４通りの
		動きに分かれるような場合（普通にすると８つのマクロが必要です。）、
		長過ぎて１つのマクロには入らない、というときに使います。
		たとえば、次のようなマクロがあったとしましょう。
			macro 1:	f[4] tr90[2] mp[2]
			macro 2:	f2[2] tr90
			macro 3:	tr90 i[2]
		そして全員にマクロ１が設定されているとします。
		このとき、変数ｐが２の人は全体として
			f[4] tr90[2] f2[2] tr90
		という動きになります。
		また、変数ｐが３の人は
			f[4] tr90[2] tr90 i[2]
		という動きになります。
		つまりマクロｐがそこに書いてあるのと同じ働きをするわけです。
	
		Mm[n]	ｎカウントのｍ番のマクロを書き込んだのと同じ働きをします。

		※	多重のネストは認められません。
			つまり、ネストしたマクロには、ｍマクロが含まれていてはいけません。
			含まれていた場合は、エラーになります。

	□ 位置直接指定
		このｐマクロが指定されたカウントを０とするｐマクロ内でのみ使える
		変数ｃでｃカウント目に立っている位置を（ｘ，ｙ）で表現します。
		四角から円へのスライドとか、変な動きを表現するためのものです。
		（絶対位置スライドでも表現できます。）
		また、これから新しく開発されるであろう技を表現するためのものでも
		あります。（人で、ｓｉｎのグラフを書いてみたりもできるけど。）
		
		P<x,y>[n]	Ｐマクロ内でのｃカウント目に立つ位置を式によって
					直接指定します。次にあげる、定数、関数、を使って
					表現します。

		ここで大回転をＰマクロで書くことを考えてみましょう。
		半径が r ではじめの位置が角度 t をなすところにいる人が１カウントで
		角度 d だけ回転するとき n カウント目に立っている座標を考えます。
			x=r*cos(t+dn)
			y=r*sin(t+dn)
		というふうに点を表すことができますが、実際には角度 t というのは
		アークタンジェントを用いないと求めることができません。
		（アークタンジェントとは任意の実数 n を与えるとき、tan(a)=n をみたす
		角度 a を返す関数のことです。）
		そこで三角関数の加法定理を用いて分解すると、
			x=r*(cos(t)cos(dn)-sin(t)sin(dn))
			y=r*(sin(t)cos(dn)+cos(t)sin(dn))
		となりますが、ここで r*cos(t) というのははじめに立っている位置の
		ｘ座標を、 r*sin(t) はｙ座標を表しているので、それぞれを x0,y0 とすると
			x=x0*cos(dn)-y0*sin(dn)
			y=y0*cos(dn)+x0*sin(dn)
		となります。これをマクロにしてみると左９０度３２カウント大回転の場合は
			p<(#x*@c(90*c/32)-#y*@s(90*c/32))/256,
			(#y*@c(90*c/32)+#x*@s(90*c/32))/256>[32]
		と表現することができます。
		Ｒマクロはこれと同様の方法で座標を求めています。

	□ マクロ終端子
		そこをマクロの終わりとします。ここより後には何を書いても
		処理されません。リンクの内部処理のためだけに存在していたのですが、
		今では使っていません。これを使えばマクロにコメントのようなものを
		書いたりすることもできます。
			rl90[32] ;ﾀﾞｲｶｲﾃﾝ!
		というのもエラーになりません。

		;		そこをマクロの終わりとして処理します。

■ 定数
	マクロ内で参照できる定数です。'#' で始まります。普通に使っている場合
	必要ありませんが、Ｐマクロを使う場合などは知っていると便利でしょう。
	
	□ 位置定数
		そのシーンのはじめに立っている位置の（ｘ，ｙ）座標を表します。
	
		#x		スタート位置のｘ座標です。
		#y		上に同じくｙ座標です。

	□ 方向定数
		そのシーンのはじめに向いている方向を０〜３１５で表しています。
		ベクトル表現方向を向いている場合は０になります。

		#d		はじめに向いている絶対方向を示します。

	□ 距離定数
		そのシーンのはじめに立っている位置から（ｘ，ｙ）までの距離を表します。
	
		#r<x,y>	＜ｘ，ｙ＞からの距離。省略された場合は原点からになります。

	□ キャラクタ番号定数
		その人のキャラクタ番号を示します。キャラクタ番号は、線、円を
		作ったときに、連続的に与えられるのでそれを利用して奇数、偶数で
		わけることで、線、円の一人おきの指定が簡単にできます。
		（でも番号つけなおしの影響をもろに受けてぼろぼろになってしまうので
		あまりおすすめしません。）
		
		#n		このマクロを持っている人のキャラクタ番号を表します。

■ 関数
	マクロ内で使える関数です。 '@' で始まります。
	最近はメジャーになりつつありますが @ は、アットマークと読みます。
	定数同様知らなくても十分使えます。

	□ 三角関数
		言わずと知れた三角関数です。
		ただ、整数しか扱えないので、値は -256 から 256 で返ってきます。
		割り算して使ってください。
	
		@s(t)	サイン。角度は３６０度系で指定します。
		@c(t)	コサイン。サインに同じです。

	□ 平方関数
		ルートです。精度を得るため、実際の１０００倍の値で返ってきます。
		つまり @r(4) は 2000 になります。また、ｎに与えられる最大の数は
		1073 です。これを越えると常に 0 が返ってくるので、
		０除算にならないように気をつけてください。
	
		@r(n)	ｎの平方を実際の１０００倍で返します。

	□ マクロ関数
		マクロをｃの関数、または定数として扱い、その値を返します。
		ｐマクロ内に書かれている場合はｐマクロ内変数ｃを使うことができます。
		何度も書くのが面倒くさい、１つのマクロに入らない、というときに使います。	
		@m(n)	ｎ番のマクロを計算して、値を返します。
				（例：左９０度３２カウント大回転を＠ｍ関数を使って表現。）
				macro 1:	p<(#x*@c(@m(2))-#y*@s(@m(2)))/256,
							(#y*@c(@m(2))+#x*@s(@m(2)))/256>[32]
				macro 2:	90*c/32

	□ 偶数・奇数関数
		偶数か奇数かを調べて値を返します。
		一列に並んでいるとき、偶数奇数でマクロが分かれるときなどに使えます。
		奇数のことをｏｄｄ、偶数のことをｅｖｅｎというのでこういう名前です。
	
		@e(n)	整数ｎが偶数なら１、奇数なら０を返します。
		@o(n)	@e() 関数の逆で、奇数なら０を返します。

	□ 円関数
		三角関数は、円の表現の場合が多いので、それを簡単にするためのもの
		なのですが、三角関数を使って表現するのとそう変わりません。
		リンクスライドがないころの遺物です。
	
		@cx(r,t)	半径ｒの円の円周上の角度ｔの点のｘ座標を返します。
		@cy(r,t)	同じくｙ座標を返します。

	□ 絶対値関数
		絶対値をとります。

		@a(n)	整数ｎの絶対値を返します。

■ 詳細
	
	※	計算途中で生じる値も含めて正しく計算できる範囲は
		-2,147,483,648 〜 2,147,483,647 までです。
	
	※	０除算はエラーを返します。
	
	※	計算途中で -32,767 という値がでる場合エラーになります。
	
	
■■■■ Interfaces ■■■■
	
	MASS Vision version 4.0 で数値、範囲、文字列を扱う共通のルーチンについて
	解説します。

■ 数値入力
	数値の入力は電卓風にしています。マウスで入力することができるように
	なっていますが、テンキーで入力することもできます。
	方向値はよく使うので別ボタンで簡単に入力できるようになっています。
	
	▼ 各ボタンの説明
	
		←	BACK. 最後に入力した値を無効にします。キーボードでは BS です。
		−	MINUS. 入力した値の符号を反転します。０にたいして入力すると
			次に数値を入れたときに符号が逆になりますキーボードでは - です。
		OK	OK. 値を確定します。キーボードでは RETURN です。
		CA	CANCEL. やめます。キーボードでは ESC です。
	
	入力できる値は -999 から 999 までです。
	
■ 文字列編集
	マクロの入力、コメント作成などのときに使うものです。
	いわゆる挿入モードのみ存在します。
	シフトキーとの多重押し機能がいくつかあります。
	
	▼ 各特殊キーの説明
	
		←			カーソルを１つ左に動かします。
		SHIFT+←	カーソルを１文字目に移動します。
		→			カーソルを１つ右に動かします。
		SHIFT+→	カーソルをいちばん最後に移動します。
		DEL			カーソルのある位置の文字を消去します。
		SHIFT+DEL	カーソルのある位置から右側の文字をすべて消去します。
		BS			カーソルの左にある文字を消去します。
		SHIFT+BS	カーソルより左の文字すべてを消去します。
		ESC			文字列を編集前の状態に戻し、編集を終了します。
					右クリックにも同様の機能が割り当てられています。
		RETURN		編集を確定し、実際に反映します。
					左クリックにも同様の機能が割り当てられています。
		
		☆ 日本語（全角文字）について
			全角文字には対応していませんが、入力することは可能です。
			状況によっては文字化けが生じます。動作の保証はしません。

■ 領域指定
	範囲の指定をするためのものです。
	もともとは範囲内に存在するキャラクタを指定するためのものですが、
	キャラクタをクリックすることで、そのキャラクタの選択となる場合もあります。
	範囲終点を決定するときに
		"シフトを押しながら終点を選択すると、１人おきの指定になります."
	という表示がでる場合は、シフトを押しながら範囲終点をクリックすると
	範囲始点に近いほうの人から１人おきに選択したことになります。
	また
		"ＣＴＲＬを押しながらもう一点を決定すると、平行四辺形になります."
	という表示がでる場合は、ＣＴＲＬを押すと、指定する範囲を平行四辺形状に
	することができます。この場合も範囲始点に近いほうの人から１人おきに
	選択したことになります。
	環境設定の領域指定で、ＣＴＲＬを押さなくても常に平行四辺形で
	選択できるようにすることもできます。
	
■■■■ メニュー別機能解説 ■■■■
	
	MASS Vision version 4.0 のもつ機能をメニュー別に紹介します。
	思いがけない機能があることもあるので、ぜひ一度はすべてに
	目を通しておくことをおすすめします。

■ マクロ編集
	マクロの編集、設定をして、アニメーションを行ないます。
	マスの中でキャラクタをクリックすると、そのキャラクタのキャラクタ番号、
	設定されているダッシュ指定、マクロ番号、初期方向などを表示します。
	
	□ マクロ	（マクロの設定はＵＮＤＯ対象）
		マクロの入力、設定をします。入力できるマクロの最大数は 80 です。
		設定したマクロ番号によって色分けされるようになります。
		設定されていない人は白です。また、配置した人にどのマクロにしたがって
		移動するかを指定します。
		色と番号の対応が表示してあるバーをクリックするとその番号のマクロが
		表示されます。
		
		▼ 各ボタンの説明
			
			△	UP. 入力するマクロの番号を１つ上げます。
			▽	DOWN. １つ下げます。
			▲	10UP. もちろん10上げます。
			▼	10DOWN. 10下げます。
			！	ここをクリックすると水色に反転します。
				この状態でマクロを指定された人はダッシュ指定（方転の方向が
				左右逆方向になります。方転のほか、スライドなどでもダッシュを
				指定することができるものがあります。詳しくはマクロ書式を
				参照してください。）
			OK	OK. 表示されている番号のマクロの入力・編集にうつります。
			CA	CANCEL. マクロ入力をやめます。
			CP	COPY. 表示されているマクロをコピーバッファにコピーします。
				PA が水色に反転します。すでにコピーバッファに情報がある場合は
				何も起こりませんが、コピーバッファの内容は更新されます。
			PA	PASTE. 水色に反転している場合はコピーバッファの内容を
				表示している番号のマクロに書き込みます。
			CL	CLEAR. 表示中のマクロを消去します。注意してください。
			
			☆ コピーバッファについて
				コピーバッファはマクロをコピーするときに使います。
				１番のマクロの１ケ所だけを変えれば２番のマクロになる、
				という場合に便利です。
				この場合、まず１番のマクロを表示して、 CP を押します。
				このとき PA が水色に反転します。
				次に２番のマクロを表示させ、 PA を押し、ペーストします。
				すると、２番のマクロに１番のマクロの内容がコピーされます。
				コピーバッファの内容は１回コピーするとマクロ入力をやめるまで、
				またはもう一度コピーするまで何度コピーしてもコピーバッファの
				内容は失われないので、何度でもペーストできます。
				３番のマクロも似ている、という場合には３番のマクロを表示して、
				続けて PA を押せば連続してペーストできます。
	
	□ 変数設定	（ＵＮＤＯ対象）
		ｎ式のための変数をひとりひとりに設定します。
		変数を使うことによって規則的な動きを簡単に表すことができます。
		水色に反転している変数の値によって色分けされるようになります。
		以下、水色に反転している変数のことをアクティブな変数と呼びます。
		色と番号の対応が表示してあるバーをクリックするとアクティブな変数の
		現在値がその値になります。
		
		◆ 変数設定メニューボックス
			アクティブな変数の変更、値などを変更・設定するためのものです。
			
			var(variable)	:	変数の名前です。ここをクリックすると
								その変数がアクティブになります。
			now				:	変数の現在値です。
								変数を設定したときにはここの値が設定されます。
			inc(increase)	:	１人に変数を設定したときに自動的に now の値が
								ここで設定されているぶんだけ増えます。
								はじめは１に設定されています。
								ここをクリックすると値を変更できます。
								右クリックすると０にセットされます。

		◆ 変数の設定	（ＵＮＤＯ対象）
			変数設定メニューボックスで水色に反転している変数を設定します。
			変数の設定方法には２通りあります。

			◇ １人のみ
				変数を設定したい人の上で左クリックします。
				クリックした人には now の変数が設定されます。
				アクティブな変数の now の値は inc 分増加します。
			
			◇ 範囲指定
				四角形の範囲に存在する人すべてに順番に変数を設定します。
				このとき変数は、範囲始点に近い人から、範囲始点に遠い人
				という順番で now から inc で設定されている値ずつ
				大きくなりながら設定されます。
				inc が０になっている場合は範囲内の全員が now になります。
				
				☆ 変数設定の細かい規則
					始点と終点の変位のｘｙ成分のうち大きいほうを基準にして
					変数を設定していきます。同じ距離に２人以上の人がいる場合は
					キャラクタ番号の小さい人のほうが先になります。
	
	□ 初期方向設定	（ＵＮＤＯ対象）
		配置した人にシーンのはじめにどの方向を向いているかを設定します。
		画面の上を０度とし、右回りで角度が増加します。
		設定したい角度をクリックして水色に反転させ、範囲を指定してください。
		この初期方向設定では４５度刻みの方向しか設定できません。
		１：２方向などを指定したい場合は特殊初期方向設定を使ってください。

	□ アニメーション
		アニメーションし、動きを表示します。
		
		※	アニメーションを実行するには、カウント数に、初期方向と
			エラーのないマクロが全員に設定されていることが必要です。
		
		◆ ＡＵＴＯアニメ
			自動的にアニメーションします。
			wait に表示されている値は１カウントをどれくらいの時間表示するかを
			表しています。１で約 0.17 秒です。
			この値はキーボードの↑↓で加減することができます。
			あまり大きくすると動いていないように見えます。
			
		◆ ＭＡＮＵＡＬアニメ
			マウスのクリック、またはキーを押すことでカウントを進めたり、
			戻したりしてアニメーションすることができます。
			
			▼ 各ボタンの説明
				
				△	UP. １カウント進めます。左クリックでも同じです。
				▽	DOWN. １カウント戻します。右クリックでも同じです。
				▲	NEXT. 次のシーンに進みます。
				▼	BACK. 前のシーンに戻ります。
				OK	OK. アニメを終わります。リターンキーと同じです。
				CA	CANCEL. アニメを中止します。ＥＳＣキーと同じです。
			
			☆	マニュアルアニメのときに、一度エラーを出したシーンは
				一度アニメを終了するまでスキップするようになっています。
		
		◆ 編集シーンアニメ
			編集中のシーンをアニメーションします。
			
		◆ 全シーンアニメ
			編集中のプロジェクトにあるシーンを、１から連続しているシーン番号の
			最後までアニメーションします。
			連続していないファイル、１からでないファイルを
			アニメーションしたい場合はアニメファイルを使ってください。
		
		◆ overview
			全カウントの縮小図を表示します。
			形の変化の様子をとらえやすいのではないでしょうか。
			印刷して、切って、ぱらぱらアニメにすることもできます。
			（別におすすめしませんが…）
		
		◆ アニメファイル
			連続していないシーン番号のファイルを連続してアニメーション
			させるためのものです。
			
			▼ 各ボタンの説明
				
				△	FILENOUP. アニメファイルの番号を１増やします。
				▽	FILENODOWN. １つ下げます。
				△	ORDERUP. アニメオーダーのページを１つあげます。
				▽	ORDERDOWN. アニメオーダーのページを１つ下げます。
				GO	GO. オーダーにしたがってアニメーションします。
				OK	OK. オーダーをアニメファイルに保存します。
				AU	AUTOFLAG. オートアニメフラグです。ここが反転していると
					オートアニメになります。はじめはオートになっているので
					マニュアルにしたい場合はクリックしてください。
			
			オーダーの空いている部分をクリックすると、プロジェクトにある
			シーン一覧が表示されるので、どのシーンをクリックしたオーダーに
			割り当てるか指定してください。割り当てを解除する場合は、
			解除したいオーダーの上で右クリックしてください。
			左クリックすると、そのシーンの形が表示されます。
			
		◆ なめくじトレース
			キャラクタが通る点を直線で結んだものを全員表示します。
			なめくじが通ったあとが白く残るのにちなんで名前をつけてあります。
			ほとんど役に立たない機能ですが、線がきれいだったりすることも
			あるので疲れたときなどに使ってみてください。
			
			☆ デバッグに。
				Ｐマクロを使ったときにキャラクタが画面の外にいってしまって
				どうしようもない、というときにキャラクタがどの方向へ
				飛んでいってしまったかが分かる、といえば分かりますが、
				マクロ編集の一人をクリックするやつでもいいしね…。
			
	□ 色分け	（ＵＮＤＯ対象）
		配置したキャラクタに対して色をつけることができます。
		設定した色で色分けされるようになります。

	□ カウント数変更
		編集中のシーンが何カウントであるかを設定します。
		カウント数が設定されていない場合でも、マクロ、マクロの指定が
		正しく行われていれば自動的に設定されます。
		画面左上に表示されているカウント数の部分をクリックしても
		設定することができます。
		
	□ 特殊初期方向設定	（ＵＮＤＯ対象）
		スライド方向を向く、１：２方向などといった普通ではない初期方向を
		設定する場合に使用します。
		
		◆ ベクトル方向
			初期方向設定では設定できない１：２方向などの
			初期方向を設定するときに使います。
		
		◆ スライド方向
			シーンのはじめのスライドの進行方向を初期方向にします。
			
			※	アニメーションができる状態になっていないとこの機能は
				使うことができません。

		◆ 点座標方向
			ある１点を向きます。円の中心を向く、という場合などに使います。
			
			◇ 外向きのときは…
				中心を向かせた後に配置−対称−反対向きで
				外向きにすることができます。
			
■ 配置	（ＵＮＤＯ対象）
	キャラクタを配置してシーンのはじめの位置を作ります。
	マスの内部で左クリックすると一人だけ配置できます。
	そのままドラッグすれば右上に表示される細かい設定画面で１／１２マス単位で
	位置を指定することができます。
	すでに配置されている人の上でクリックするとそのキャラクタは消去され、
	ドラッグすると移動できます。ドラッグの場合は設定されている変数などは
	そのまま継続されます。
	
	□ 線描画	（ＵＮＤＯ対象）
		直線上にキャラクタを配置します。
		直線の始点、終点を指定して、人数を入力します。
		１人だけ、というのはできません。
		１人だけの場合はマスの中でクリックしてください。
	
	□ 円描画	（ＵＮＤＯ対象）
		円上にキャラクタを配置します。
		円の中心、円上の一点を指定して、配置する人数を指定します。
		その後、初期角度を入力してください、とでますが、これは
		ｘ軸の正の方向を０度としたときに、何度のところに１人目のキャラクタを
		配置するかを表しています。
		０度にすればｘ軸上に１人目が配置されます。
		
		☆ 初期角度について
			初期角度も他と同様整数値しか与えることができません。
			すれ違いサイクロンのときなどに小数が設定できないと困るのですが、
			できません。
	
	□ 対称
		すでに配置されているキャラクタを対称形で配置します。
		このとき、設定してある変数、マクロは対称位置の人も同じになり、
		初期方向は対称方向になります。
		マスで使う形はほとんど対称形なのでこれをうまく使うことで
		配置、変数などの設定を行なう手間を格段に省くことができます。
		初期方向、変数、マクロを設定し、アニメで動きを確認した上で使用すると
		よいと思います。
		
		☆	対称によって配置されるキャラクタは次のものが対称の元となる
			キャラクタから引き継がれます。
				ダッシュ指定
				色
				マクロ
				変数
				初期方向（対称点・軸に対して対称の方向）
		
		◆ 原点対象	（ＵＮＤＯ対象）
		◆ ｘ軸線対象	（ＵＮＤＯ対象）
		◆ ｙ軸線対象	（ＵＮＤＯ対象）
			以上は説明がなくても分かると思います。
		
		◆ L90 回転コピー	（ＵＮＤＯ対象）
		◆ R90 回転コピー	（ＵＮＤＯ対象）
			左、または右に９０度回転して配置します。
			同じ形を４つ作った場合有効です。
		
		◆ 45-225 対象	（ＵＮＤＯ対象）
		◆ 135-315 対象	（ＵＮＤＯ対象）
			マスに対して４５度の斜め線を対称軸にするときです。
			ほとんど使いません。
		
		◆ 反対向き	（ＵＮＤＯ対象）
			これは対称配置ではありませんが、設定してある初期方向を
			反対にすることができます。
	
	□ 整列	（ＵＮＤＯ対象）
		ラフに配置してもきちっと１マス上に並べたりする、ということが
		整列を使うとできるようになります。
		指定した条件を満たす最も近い点にキャラクタを移動させます。
		すでにそこにキャラクタがいる場合は移動しません。
		１／ｎマス上、のｎは、１マスをｎ等分する線までを有効な線と見なすことを
		意味しています。
		
		※	マスの中心に１マス間隔で並べたい場合は１／２マス上です。
			１マス上を指定した場合、ぐちゃぐちゃになってしまいます。
			他の場合も同様です。
			
	□ コピー	（ＵＮＤＯ対象）
		ある範囲のキャラクタ群をコピー、または移動します。
		範囲を指定してコピー先を指定してください。
		コピー先のキャラクタにはコピーもとのキャラクタの変数・マクロなどが
		そのまま引き継がれます。
		コピー元のキャラクタを消去すれば移動になります。
		１２８人を越える場合は、１２９人目以降のキャラクタはコピーされません。
		
	□ 消去
		消去、という作業は作成したデータをゴミと見なして捨てることなので
		注意して行い、ゴミでないものまで捨てたりしないようにしてください。
		
		◆ 領域指定	（ＵＮＤＯ対象）
			指定した範囲のキャラクタを消去します。
				
		◆ 全員	（ＵＮＤＯ対象）
			配置したキャラクタ全員を消去し、また作成したマクロすべてを
			削除します。キャラクタに対してはＵＮＤＯが効きますが
			マクロにはＵＮＤＯが効かないので注意してください。
			キャラクタのみすべて消去したい場合は領域指定消去で
			全員を選択してください。
			
		◆ マクロ消去
			編集シーンに存在するすべてのマクロを消去します。
			消去したマクロはＵＮＤＯしても元には戻らないので注意してください。
	
	□ リサイクル	（ＵＮＤＯ対象）
		
	□ ＵＮＤＯ
		誤った操作によって失なってしまったキャラクタ情報を復元します。
		初期方向設定、左クリックでの配置、消去などキャラクタに対する
		すべての操作がＵＮＤＯの対象となります。
		ただしマクロ設定はＵＮＤＯ対象になりますが、マクロそのものは
		ＵＮＤＯの対象外です。
		
		☆ ヒストリＵＮＤＯ
			通常１回しかできないＵＮＤＯを、何回もＵＮＤＯすることが
			できるようになります。
			ただしディスクアクセスが多発するようになるので、好みに応じて
			使用して、ライトバックキャッシュなどを使用してください。
			massv.ini の MASSV セクションに次のエントリを加えることで
			ヒストリＵＮＤＯを利用することができます。
			UndoMaxTimes=128
			数値は最大何回分のＵＮＤＯ情報を保存するかを指定します。
			ディスクスペースが許せば最大９９９９回までのＵＮＤＯが可能です。
			
■ リンクスライド
	リンクスライドはわけの分からないスライドマクロを書かずに、スライドを
	visual に作成するためのものです。
	ニセ回（直角スライド）、面／線の四角スライド、などの直線→直線スライド、
	円拡大・縮小などは本当に簡単に作れます。
	
	リンクスライドは次の順序で作成します。
		１．まず、シーンのはじめの位置を配置などで作ります。
		２．リンクスライドの目的地作成でスライド先の位置を作成します。
		３．リンクを行います。
		４．終わります。リンクスライドを終了するとマクロ、変数が設定されます。
		
	☆ 対象配置とリンクスライドについて
		初期方向を 0,90,180,270 の軸方向に設定して、リンクスライドを行うと
		マクロ・変数は相対方向スライドで生成されます。
		初期方向がそのほかの場合は絶対方向スライドで生成されるので
		対象で配置をしても全員が一つのところにスライドしてしまいます。
		この場合も、軸方向に設定し直し、もう一度リンクスライドを選び、
		何もせずに元に戻すと相対方向に再設定されます。
	
	□ 目的地編集
		スライド先の位置を作成します。基本的には配置と同じです。
		
		◆ 目的地ロード	
			すでに作られているシーンファイルを目的地にします。
	
	□ リンク
		開始位置と目的地をリンクします。
		
		◆ 目的地とリンク
			スライドはじめの位置と目的地とを１つ１つ指定していきます。
		
		◆ 最短距離リンク	（リンクＵＮＤＯ対象）
			キャラクタ番号順に最短距離をとる目的地とリンクします。
			円拡大・円縮小のときには効果を発揮します。
		
		◆ ＡＵＴＯリンク	（リンクＵＮＤＯ対象）
			直線を同じ比で内分する点同士を自動的にリンクします。
			内分点同士をリンクするので直線から直線へのスライドにしか
			有効ではありません。
			
			★ やってみよう！
				直線から直線のスライドを作ります。
				
				１．まず、直線を作ります。このとき、全員が
					きれいな位置（１／１２上）に来るようにしてください。
				２．端の２人を目的地とリンクでリンクして下さい。
				３．ＡＵＴＯリンクを行ってください。
				
				以上で全員がリンクされるはずです。
				
				☆ うまくいかないときは…
					直線を作っている人の座標は整数値しかとれません。
					そのため生じた誤差のために内分点として
					認識できないことがあります。
					直線を引いた後、整列を行ったりしてください。
		
		◆ 色分け識別設定
			ＡＵＴＯリンク、最短距離リンクのときに色の違うキャラクタ同士は
			リンクしないようになっています。これを解除したい場合は
			これを識別しないにしてください。
		
		◆ LINK UNDO
			ＡＵＴＯリンクや最短距離リンク、を行ったときにめちゃくちゃに
			リンクされたとき、間違ったリンク解除をしたとき、こんなときには
			LINK UNDO です。間違った操作をする前の状態に戻ります。
		
		◆ 領域リンク解除
			指定した範囲でリンクを解除します。

		◆ 全リンク解除
			全部のリンクを解除します。
		
	□ マクロ生成設定
		マクロの生成方法を変更します。
		通常、初期方向が軸方向である場合はマクロ・変数は相対方向スライドで
		生成されるようになっています。それを常に絶対位置スライドで
		生成するように変更します。
		この設定は一度リンクスライドを終了すると失われます。
		
	□ 表示モード変更
		リンクした２点を直線で表示するかどうかを設定します。

■ 環境設定
	環境設定には色分けの設定など、普段は使わないけれどたまに使う、
	というような機能が集められています。
	
	□ 赤白変更
		赤用に使うか、白用に使うかを設定します。
		白用に設定すると細かい設定画面で１／３マスのラインが、
		赤に設定すると１／４マスのラインが表示されます。
		また、Ｆマクロの１マスの歩数を省略した場合に設定される歩数が
		白では３に、赤では４になります。
		はじめは赤になっているので白用にする場合は設定し直してください。
	
	□ マウス感度設定
		マウスの感度を設定します。ここで０とか小さな値を設定するとマウスが全く
		動かなくなるので気をつけてください。
	
	□ アニメ色分け
		アニメーションのときに今までの色表示で継続して表示するか、
		設定した色で表示するかを設定します。
		はじめは、設定した色になっています。
	
	□ バグ検出設定
		キャラクタとキャラクタがアニメ中に設定した値以下の距離にいる場合に
		その旨を表示します。
		単純に近くにいるかどうかで、ぶつかるかどうかではありません。
		ＯＮにしているとアニメーションが遅くなります。
		はじめはＯＦＦです。
		
	□ 通常色分け
		キャラクタ番号で色分けするか、設定した色で色分けするかを設定します。
		番号付け直しの後、確認のときに便利です。
		はじめはＯＦＦです。この設定は一度終了すると失われます。

	□ 領域指定
		範囲の指定方法を、ＣＴＲＬを押したときだけ平行四辺形状にするか、
		それとも、いつも平行四辺形上にするかを設定します。
		常に平行四辺形状にすると、けっこう面倒です。
		はじめはＣＴＲＬを押したときのみ、になっています。

■ データ管理
	データの管理をします。
	
	□ ファイル管理
		シーンファイルに対する操作を行います。
		
		◆ セーブ
			編集中のデータをファイルに保存します。
			シーン番号を設定していない場合はそのプロジェクトの中で空いている
			シーン番号の中で最も小さいものが自動的に設定されます。
			新規に作成されたシーンの場合は自動的にコメントが作成されます。
			面倒だったらそのままでいいですが、なにか思い入れがあれば
			変更してやってください。

		◆ ロード
			保存したデータを呼び出します。
			呼び出すときに存在した編集中のデータはなくなります。
			ＵＮＤＯの対象外なので注意して行ってください。

		◆ 編集シーン変更
			編集中のデータにシーン番号を設定・再設定します。
			そのプロジェクトのシーンファイル一覧が表示されるので
			適当なシーンを選んでください。
			画面左上のシーン番号が表示されている部分をクリックしても
			同様の機能が得られます。
			
		◆ 削除
			作成、保存したシーンファイルを削除します。
			見るに耐えない・じゃま・ディスクがもったいない、という場合に
			使ってください。私としては作り出したデータを消すのは
			もったいないと思うのですが…。
			
		◆ 移動
			シーンファイルを編集中のプロジェクトから他のプロジェクトに
			移動します。このとき移動先のプロジェクトに同じシーン番号のものが
			あれば、重ならないように自動的にシーン番号を付け変えて移動します。
			移動したいシーンをクリックして反転させてください。
			もう一度クリックすると選択解除になります。
			広い範囲を選択したい場合は、選択範囲のはじめでクリックし、
			選択範囲の最後でボタンを離してください。このとき範囲の終わりは
			はじめより大きな番号でなければいけません。
			
		◆ ならべかえ
			試作品など、ばらばらの順番で作っていたものを順番に並べ変えたい、
			という場合に使います。選択した順番で１から順番にシーン番号が
			設定されていきます。最後に選択したシーンならもう一度クリックすると
			選択解除になります。広い範囲を順番に選択したい場合は、選択範囲の
			はじめでクリックし、選択範囲の最後でボタンを離してください。
			このとき範囲の終わりは、はじめより大きな番号でなければいけません。
			選択しなかったものは、ならべかえる前についていたシーン番号の順に、
			選択されたものの次のシーン番号から設定されていきます。
			
	□ project変更
		編集するプロジェクトを変更します。
		画面の左側の数字が水色に反転しているプロジェクトが現在編集中の
		プロジェクトです。右側のコメントの部分をクリックするとコメントを
		変更することができます。
		希望のプロジェクトを水色に反転させたら、右クリックで
		プロジェクト変更を終了させて、編集してください。
		
	□ 番号つけなおし
		この機能は赤線引きのときに大きな威力を発揮します。
		プロジェクトにあるすべてのシーンファイルに対して変更を行い、
		また、データの状況によっては、データを破損する可能性があるので、
		必ずバックアップをとってから使用してください。
		この機能は、あるシーンをアニメーションして、その最後のカウントと
		次のシーンのはじめとを比較して、同じ位置にいるキャラクタ同士を
		同じキャラクタ番号になるように変更します。このときキャラクタの色は
		前のシーンと同じ色に変更されます。
		これによって、１シーン目で全員のキャラクタ番号を調べておき、
		あるシーンでのキャラクタ番号を調べれば、あるキャラクタ番号のひとが
		そのシーンではどの位置に来ているのか、ということがわかり、赤線引きの
		デバッグ、確認のための表を作ることができるのです。
		
		※	基本的に、同じ位置に来る、ということが必要です。
			そのため、回転系の誤差のでる動きがシーン間に来るような場合には、
			うまく動作しないことがあります。この場合は以下に対処法を
			記述しますのでそちらを参照してください。
		
		※	シーン間で、旗持ち・大幹などがいる、いないでキャラクタの数が違う
			場合がありますが、違うと警告がでます。
			この場合、シーン間でそのほかのキャラクタの位置が同じであれば
			問題ありませんが、いちおう結果を確認しておいてください。

		◆ シーン間で位置が微妙に違う場合
			この場合は、誤差のある２つのシーンの間に補完のためのシーンを
			１つ入れることで対応してください。
			補完のためのシーンは、前のほうのシーンの最後のカウントを
			リサイクルしたものを初期位置とし、後のシーンの初期位置を目的地に
			リンクスライドの最短距離リンクでスライドを作成し、保存して、
			ならべかえで２つのシーンの間にいれてから番号つけなおしを
			行ってください。
		
		◆ 番号の確認
			環境設定−通常色分けでキャラクタ番号で色分けさせる状態で
			全シーンのアニメーションを行って、キャラクタの色が変な変化を
			しなければ番号つけなおしはうまくいっています。
			うまくいっていなければ、バックアップからデータを復元し、不都合を
			直して再度つけなおしを行ってください。
		
		◆ うまくいかない場合
			とにかく、基本的に同じ位置にキャラクタがいないとうまくいきません。
			うまくいかないところにはひたすらリンクスライドを突っ込むしか
			ないでしょう。
			
■■■■ Tips ■■■■
	
	ここでは MASS Vision version 4.0 を使う上でのちょっとしたテクニックを
	紹介します。

	□ 対称
		対称形の多いマスの形を楽に作るためのものですが使い方次第でより楽に
		配置できるようになるでしょう。ここでは対称の使い方を紹介します。
		
		◆	対称形の場合動きは反対側と全く同じ、または方転方向が逆ということが
			多いので１カ所だけを配置、変数などを設定して残りは対称で配置すると
			簡単です。方転方向が逆の場合は、このあとダッシュ指定にしたり、
			変数を変更したりするといいでしょう。
		
		◆	絶対方向のスライド、方転を使うと、対称で配置してもあとでマクロ、
			変数に手直しが必要になるので使わないほうがいいでしょう。
		
		◆	リンクスライドを使用した上で対称を使う場合、リンクスライドが
			相対方向でスライドを作成するように、はじめは初期方向を
			軸方向にしておくと、対象で配置したキャラクタも変数などの変更なしに
			思い通りの位置にスライドします。
			初期方向が軸方向でない場合も、はじめは軸方向にしておき、
			リンクのあとに、初期方向を設定し直し、スライド前に一時的に設定した
			軸方向に０歩回をするようにマクロを書き換えておくとうまくいきます。

	□ リサイクル
		リサイクルを使えば直接配置することが困難な形を作ることができます。
		
		◆ リンクスライドとの連携
			リンクスライドの目的地として大回転から４５度回ったときの位置を
			指定したいとします。４５度の位置は目的地作成では正確な位置を
			作ることができません。
			こういう場合は、一度大回転の４５度まで回ったものをリサイクルし、
			適当なシーン番号をつけて保存しておきます。
			そして目的地ロードで目的地とすればよいのです。
	
	□ 番号つけなおし
		番号つけなおしは赤線引きのときに非常に便利です。
		いちばんはじめのシーンで赤線を引くキャラクタに緑など、普通は
		使わない色を設定して保存します。
		そして番号つけなおしを行うと、すべてのシーンの同じキャラクタ番号の
		キャラクタが緑色になるので、赤線を引くときに、前のシーンの赤線を
		引いて、着いた座標でなく、形における位置で次のシーンのはじめの位置を
		マークできるので、あるシーンで生じた間違いが次のシーンにも
		引き継がれてしまう、ということが無くなり、精神的にかなり楽になります。
	
	□ ながし
		ながしは残念ですができません。
		時差方（時間差方転）でごまかしてください。
	
	
■■■■ Limits ■■■■
	
	ここでいろいろな限界値を紹介しておきます。
	
	１つのプロジェクトに入るシーン数					120
	配置できるキャラクタ数								128
	記述できるマクロの最大数							80
	１つのマクロの最大長								139
	シーンファイルのコメント							69
	１シーンのカウント数								64	(*)
	アニメファイルのコメント							39
	プロジェクト名の最大長								49
	
(*)	６４カウント目は０カウント目と同じ状態を表示。


■■■■ Sections & Entries ■■■■

	massv.ini のセクション・エントリを紹介します。

■ [MASSV]
	MASS Vision の各設定を保存してあります。

CurrentProject			最後に編集していたプロジェクト番号です。
DefaultAnimWait			ＡＵＴＯアニメのウエイト数です。
MouseSensivity			マウス感度です。
AlwaysRefreshRecent		常に変数・マクロ色分けにするかのフラグです。
LinkRefreshTrace		リンクスライドのトレース表示をするなら true です。
BugDetect				バグ検出をするなら true です。
BugDetectRange			バグ検出範囲です。
UndoMaxTimes			ヒストリＵＮＤＯ最大回数です。
MouseSensivityDisable	massv.exe でマウス感度を変更するのを禁止します。
MouseAccurateSensivity	細かい設定でのマウス感度を指定します。
BlinkSpeed				リンクスライド目的地の点滅の速さを指定します。
User					赤白の設定です。

■ [Files]
	MASS Vision の各設定ファイルを記述してあります。各ファイルは、実行される
	massv.exe と同じディレクトリに存在しなければいけません。

TitleFile		タイトルの mag ファイルです。デフォルトで massv.mag です。
ProjectFile		プロジェクトファイルです。デフォルトは massv.prj です。
FontFile		bft フォントファイルです。デフォルトは massv.bft です。

■ [Version]
	massv.ini を最後に書き込んだ massv.exe のバージョンが書き込まれています。
	（このエントリは serial #9504x 以降のものしか書き込みません。）
	
VersionNo	正確には MASS Vision version 4.0 の内部リビジョン番号ですが
			serial #95025 以降の massv.exe は 4 となっているので
			version 4.0 ならすべて 4 と書き込まれている、と
			判断していいでしょう。
SerialNo	massv.exe のシリアル番号が書き込まれています。

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	CHAPTER 3:				Thanks

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	開発にあたってご迷惑をかけた方々、お世話になった方々にこの場を借りて
	感謝の言葉を述べます。
	
	
	
■	atagan 氏の	MASS Vision ver.3.0 (mass.bas)
	からメニュー処理、細かい設定、など多くの部分を参考にさせていただきました。
	また、設計段階で抽象的なアイディアとなったと思います。
	ありがとうございました。

■	情報館の井ノ迫先生をはじめ多くの先生方にご迷惑をおかけしました。
	ここでおわびいたします。

■	このプログラムを作成するにあたって
	恋塚昭彦氏、奥田仁氏、千野裕司氏、澤隆司氏の master.lib 0.23k
	を使用させていただきました。

■	９６年白軍製作部の皆様も、完成度を高めるのに、いくつかの
	バグレポート・助言をいただきました。
	また ver.3.0 から 4.0 に乗り換えさせる、というのも開発の目標となりました。
	
■	９６年白軍製作部長の石田氏には、開発の初期から技術的なアドバイス、
	バグレポート、要望をいただきました。またカラーのノートパソコン（この
	テキストを書いているのはモノクロノートなもので）を使わせていただきました。
	ありがとうございました。
	
■	９６年赤軍製作部長の岡崎氏にサイクロン・大回転の式を作っていただきました。

■	９６年赤軍宴の三好氏に windows 用ヘルプを作っていただきました。
	
■	９６年赤軍製作部のみんなには、MASS Vision version 4.0 がまだ多くのバグを
	抱える頃から積極的に使ってもらい、ともにバグと戦えたことは大きな開発の
	励みとなりました。また MASS Vision version 4.0 をここまでのものに
	できたのも、テストユーザーとして多くのバグレポート・助言をくれた製作の
	みんな、MASS vision 製作部となってしまった私を何もいわずに見ていてくれた
	みんなのおかげだと思っています。本当にありがとうございました。

■	９６年製作部の皆様に最後にもう一度。
	このｗｉｎｄｏｗｓ全盛時代に暗黒のＤＯＳで動く使いづらい
	MASS Vision version 4.0 を使っていただきありがとうございました。
